import tensorflow as tf
import numpy as np


class MNISTLoader():
    def __init__(self):
        mnist = tf.keras.datasets.mnist
        (self.train_data, self.train_label), (self.test_data, self.test_label) = mnist.load_data()
        # MNIST中的图像默认为uint8（0-255的数字）。以下代码将其归一化到0-1之间的浮点数，并在最后增加一维作为颜色通道
        self.train_data = np.expand_dims(self.train_data.astype(np.float32) / 255.0, axis=-1)  # [60000, 28, 28, 1]
        self.test_data = np.expand_dims(self.test_data.astype(np.float32) / 255.0, axis=-1)  # [10000, 28, 28, 1]
        self.train_label = self.train_label.astype(np.int32)  # [60000]
        self.test_label = self.test_label.astype(np.int32)  # [10000]
        self.num_train_data, self.num_test_data = self.train_data.shape[0], self.test_data.shape[0]

    def get_batch(self, batch_size):
        # 从数据集中随机取出batch_size个元素并返回
        index = np.random.randint(0, np.shape(self.train_data)[0], batch_size)
        return self.train_data[index, :], self.train_label[index]


# 模型的继承
class MLP(tf.keras.Model):
    def __init__(self):
        super().__init__()
        self.flatten = tf.keras.layers.Flatten()  # Flatten层将除第一维（batch_size）以外的维度展平
        # 定义了100个神经元，每个神经元有28*28个输入  带有激活函数 activation=tf.nn.relu
        self.dense1 = tf.keras.layers.Dense(units=100, activation=tf.nn.relu)
        # 上一层输出100个y 带入下一层
        self.dense2 = tf.keras.layers.Dense(units=10)

    def call(self, inputs):  # [batch_size, 28, 28, 1]
        #
        x = self.flatten(inputs)  # [batch_size, 784]
        x = self.dense1(x)  # [batch_size, 100]
        x = self.dense2(x)  # [batch_size, 10]
        output = tf.nn.softmax(x)
        return output


num_epochs = 5
batch_size = 50
learning_rate = 0.001

model = MLP()  # 多层神经元
data_loader = MNISTLoader()  # 数据加载
optimizer = tf.keras.optimizers.Adam(learning_rate=learning_rate)  # 当我们求到了损失  计算了梯度 数据优化交给optimizer Adam是算法

# ********************************************更新处***********************************************************************
checkpoint = tf.train.Checkpoint(myAwesomeModel=model)
# 使用tf.train.CheckpointManager管理Checkpoint
manager = tf.train.CheckpointManager(checkpoint, directory='./save', max_to_keep=3)



# 公式含义 每次训练50张，所有图片训练5次，需要训练多少次
num_batches = int(data_loader.num_train_data // batch_size * num_epochs)
for batch_index in range(num_batches):
    X, y = data_loader.get_batch(batch_size)
    with tf.GradientTape() as tape:
        y_pred = model(X)
        loss = tf.keras.losses.sparse_categorical_crossentropy(y_true=y, y_pred=y_pred)  # 交叉熵损失函数
        #
        loss = tf.reduce_mean(loss)
        print("batch %d: loss %f" % (batch_index, loss.numpy()))
    grads = tape.gradient(loss, model.variables)
    optimizer.apply_gradients(grads_and_vars=zip(grads, model.variables))  # model.variables-grads变量减去梯度
    # 增加保存路径
    path = manager.save()
    print("model saved to %s" % path)

# 模型的评估
sparse_categorical_accuracy = tf.keras.metrics.SparseCategoricalAccuracy()  # 建评估器
#  载入测试集num_test_data 50张图片一个batch进行测试
num_batches = int(data_loader.num_test_data // batch_size)  #
for batch_index in range(num_batches):
    # 偏移量*batch量， 取50张图片 切片
    start_index, end_index = batch_index * batch_size, (batch_index + 1) * batch_size
    # 预测的结果
    y_pred = model.predict(data_loader.test_data[start_index: end_index])

    # update_state记录评估器的结果
    '''sparse_ 该前缀作用是可以把[1, 5, 4],转换成01的向量
    '''
    sparse_categorical_accuracy.update_state(y_true=data_loader.test_label[start_index: end_index], y_pred=y_pred)
# result() 方法输出最终的评估指标值（预测正确的样本数占总样本数的比例）
print("test accuracy: %f" % sparse_categorical_accuracy.result())
